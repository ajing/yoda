# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_runner.ipynb (unless otherwise specified).

__all__ = ['AIP', 'run_yoda_on_gcp']

# Cell
from datetime import datetime
from functools import lru_cache
import uuid
import os
from pathlib import Path
import tempfile
import yaml
import google.cloud.logging
from google.cloud.logging.handlers.handlers import CloudLoggingHandler, EXCLUDED_LOGGER_DEFAULTS

import logging

from blocks.filesystem import GCSFileSystem as gcsfs

# Cell
from googleapiclient import discovery
import warnings

class AIP:

    @property
    @lru_cache(1)
    def job_id(self):
        now = datetime.now()
        date_time = now.strftime("%Y%m%d_%H%M%S")
        gen_uunid = hex(uuid.getnode())
        return f"ai_run_{date_time}_{gen_uunid}"

    @property
    @lru_cache(1)
    def job_output(self):
        return GCPConfig.bucket()

    def run(self, image: str, machine_type: str = "n1-highmem-32", args=[], **overrides):
        """

        """
        # TODO: dealing with hyperparameters

        training_inputs = {
            "scaleTier": "CUSTOM",
            "masterType": machine_type,
            "args": args,
            "region": "us-central1",
            "masterConfig": {"imageUri": image}
        }
        training_inputs.update(overrides)

        job_spec = {"jobId": self.job_id, "trainingInput": training_inputs}
        project_id = "projects/{}".format(GCPConfig.project_id())

        _setup_logging()
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            cloudml = discovery.build("ml", "v1", cache_discovery = False)
            request = cloudml.projects().jobs().create(body = job_spec, parent=project_id)
            try:
                return request.execute()
            except e:
                logging.warn("You may want to check whether the image is in registery")
                raise e

# Cell
def _must_exist(key, dict_):
    assert key in dict_, "%r should be in the dictionary" % key

def _validate_config(conf_dict):
    _must_exist("image", conf_dict)
    _must_exist("data", conf_dict)
    _must_exist("output_path", conf_dict["data"])

def run_yoda_on_gcp(conf_dict):
    # validate config
    _validate_config(conf_dict)

    # upload config to gcp
    gcs_config_path = os.path.join(conf_dict["data"]["output_path"], "config.yaml")
    with gcsfs().open(gcs_config_path, "w") as f:
        yaml.safe_dump(conf_dict, f)

    # run on GCP
    args="yoda run {}".format(gcs_config_path).split()
    image=conf_dict["image"]
    aip = AIP()
    aip.run(image, args=args)